#!/usr/bin/env bash

set -e

# Provide jtools completions
if [ "$1" = "--complete" ]; then
	echo install
	echo update
	echo remove
fi

. $_JTOOLS_ROOT/libexec/commons

SBT_INSTALL_PATH=$JTOOLS_FOLDER/sbt
SBT_SHA_FILE="$JTOOLS_FOLDER/sbt_current_sha"

install_sbt() {
	echo "Installing SBT..."

	create_jtools_folders_if_necessary

	if [ -e $SBT_INSTALL_PATH ]; then
		echo "SBT already installed or install folder $SBT_INSTALL_PATH already exists, exiting."
		exit 1
	fi

	git clone https://github.com/paulp/sbt-extras.git $SBT_INSTALL_PATH 2>/dev/null

	update_current_sha_file

	create_path_file "sbt" "$SBT_INSTALL_PATH"

	echo "SBT successfully installed to $SBT_INSTALL_PATH"
}

update_sbt() {
	echo "Upgrading SBT..."
	
	git -C $SBT_INSTALL_PATH pull 1>/dev/null

	last_sha=$(cat $SBT_SHA_FILE)

	last_commits=$(git -C $SBT_INSTALL_PATH --no-pager log --oneline $last_sha..HEAD)
	if [ "$last_commits" == "" ]; then
		message="None"
	else
		message=$(echo -e "\n$last_commits")
	fi

	echo "commits since last update: $message"

	update_current_sha_file

	echo -e "\nSBT successfully updated."
}

remove_sbt() {
	result=$(yes_or_no "Are you sure you want to remove SBT ? [y/n] ")
	case "$result" in
		yes)
			rm -Rf $SBT_INSTALL_PATH
			remove_path_file "sbt"
			rm "$SBT_SHA_FILE"
			echo "SBT successfully removed.";;
		*) ;;
	esac
}

update_current_sha_file() {
	git -C $SBT_INSTALL_PATH rev-parse HEAD > $SBT_SHA_FILE
}

case "$1" in
	install) 
		install_sbt;;
	remove)
		remove_sbt;;
	update)
		update_sbt;;
esac

